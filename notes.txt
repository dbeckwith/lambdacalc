so can do files and stuff
cmd line interpreter
can run scripts and show output
also can convert scripts into latex markup to produce documents (don't have to do actual compilation, just output .tex files)
http://stackoverflow.com/questions/202605/repeat-string-javascript
http://en.wikipedia.org/wiki/Church_encoding#Signed_numbers
http://www.allisons.org/ll/FP/Lambda/Interpreter/
https://en.wikipedia.org/wiki/Lambda_calculus
http://www.inf.fu-berlin.de/lehre/WS03/alpi/lambda.pdf
http://www.cse.chalmers.se/research/group/logic/TypesSS05/Extra/geuvers.pdf

// a variable can be any lowercase letter, or any number surrounded by square brackets
var: [a-z]|"["[0-9]+"]"
// a name can contain uppercase letters, numbers, and the following characters: _*^%$!|+-~
name: [A-Z0-9_*\^%$!|+\-~]+
// a function can be either a name or the \ character followed by a variable followed by a . character followed by an expression
func: name|"\"var+"."" "?expr
// an application is two expressions, each surrounded in optional parentheses
app: "("?" "?expr1" "?")"?" "?"("?" "?expr2" "?")"?
// an expression is a variable, a function, or an application
expr: var|func|app
// a scheme name can contain lowercase letters only
scheme_name: [a-z]+
name_pattern: ...
scheme_cond: ...
scheme_result: ...
scheme_script: "{" (scheme_cond":" scheme_result";")* scheme_result "}"
script_name: ...

// SEMICOLONS?
script: (script_statement "\n")*

script_statement: {
// saves expr as name
// outputs "name := expr" ("name \defined expr")
def: name ":=" expr
// naming scheme
// outputs nothing?
// textual input, outputs text, rechecks any schemes for matches again, once no schemes match, can evaluate as expression
scheme: "<"scheme_script":" name_pattern">" ":=" scheme_script
// shows true or false if equiv
// outputs "expr1 = expr2" or "expr1 != expr2" ("expr1 \ne expr2")
test: expr "=?" expr
// reduce and name
// outputs "expr -> name" ("expr \to name")
redux: expr "#"
// include defs from script file
// outputs the output of each def, output optional?
import: "@import" "\""script_name"\""
comment: "//"[^\n]*|"/*".*"*/"
}

directives: @name args...
takes up whole line, so can have any kind of chars
@import script_name
@verb+
@verb++
@verb+++...
@verb-
@verb--
@verb---...
level 1: expansion steps
level 2: expansion steps, etc.

having a line with just an expression will just expand that expression, only really useful in verbose mode

// TODO: should be able to show expansion steps






/* 
 * church numerals can be defined recursively:
 * <nat: (\d+)> := {
 * 	$1 == 0: \fx.x // 0 = x
 * 	\fx.f (<+$1 - 1> f x) // n = f(f^(n-1)(x))
 * }
 * but this definition expands very slowly:
 * > @verb+
 * > 3
 *   @: 3
 *   1: \fx.f (2 f x)
 *   2: \fx.f ((\fx.f (1 f x)) f x)
 *   3: \fx.f ((\fx.f ((\fx.f (0 f x)) f x)) f x)
 * # 4: \fx.f ((\fx.f ((\fx.f ((\fx.x) f x)) f x)) f x)
 *   5: \fx.f ((\fx.f ((\fx.f ((\x.x) x)) f x)) f x)
 *   6: \fx.f ((\fx.f ((\fx.f x) f x)) f x)
 *   7: \fx.f ((\fx.f ((\x.f x) x)) f x)
 *   8: \fx.f ((\fx.f (f x)) f x)
 *   9: \fx.f ((\x.f (f x)) x)
 *   10: \fx.f (f (f x))
 * [10 steps, fully reduced]
 * 
 * or, in a faster string-based iterative generator approach:
 */
<nat: (\d+)> := \fx.<"f (" * +$1>x<")" * +$1> // n = f^n(x)
/* 
 * > @verb+
 * > 3
 *   @: 3
 * # 1: \fx.f (f (f x))
 * [1 step, fully reduced]
 */

SUCC(S) := \nfx.f (n f x) // f^(n+1)(x) = f(f^n(x))
ADD(+) := \mn.m f (n f x) // f^(m+n)(x) = f^m(f^n(x))
MULT(\cdot) := \mnf.m (n f) // f^(m*n)(x) = (f^n)^m(x)
EXP(\hat{}) := \mn.n m // n f x = f^n(x) => m^n f = n m f
PRED(P) := \nfx.n (\gh.h (g f)) (\u.x) (\u.u)
SUBT(-) := \mn.(n PRED) m

T(\mathbb T) := \ab.a
F(\mathbb F) := \ab.b

AND(\land) := \pq.p q F
OR(\lor) := \pq.p T q
NOT(\lnot) := \p.p F T
XOR(\xor) := \pq.p (NOT q) q

ISZERO(Z) := \n.n (\x.F) T
LE(\le) := \mn.ISZERO (SUBT m n)
GE(\ge) := \mn.ISZERO (SUBT n m)
EQ(=) := \mn.AND (LEQ n m) (GEQ n m)
LT(<) := NOT GE
GT(>) := NOT LE

PAIR := \xyz.z x y
FIRST(\pi_1) := \p.p T
SECOND(\pi_2) := \p.p F

Y := \r.(\x.r (x x)) (\x.r (x x))


<int: (-)?($nat$)Z>($1$2) := {
	$1: PAIR 0 $2
	PAIR $2 0
}

NTOZ := \n.PAIR n 0

<add: (?:(Z|Q)(?:_))?ADD> := {
	$1 == "I": \xy.PAIR (ADD (FIRST x) (FIRST y)) (ADD (SECOND x) (SECOND y));
	$1 == "R": \xy.PAIR (ZADD (ZMULT (FIRST x) (SECOND y)) (ZMULT (SECOND x) (SECOND y))) (ZMULT (SECOND x) (SECOND y));
	\xy.x S y
}
<lt: (Z|Q)?LT> := NOT $1GE

ISUB := \xy.PAIR (SUB (FIRST x) (FIRST y)) (SUB (SECOND x) (SECOND y))
ISUB 4Z 6Z =? -2Z

ZDIV := 

ZFACT := Y \rn.ISZERO n 1 (MULT n (P n))

<rat: (-)?($nat$)(\|($nat$)|Q)>($3 == "Q" ? $1$2 : \frac{$1$2}{$4}) := {
	$3 == "Q": PAIR $1$2Z 1Z
	PAIR $1$2Z $4Z
}

ZTOQ := \z.PAIR z 1Z
NTOQ := \n.ZTOQ (NTOZ n)

QSUB := \xy.PAIR (ZSUB (ZMULT (FIRST x) (SECOND y)) (ZMULT (SECOND x) (SECOND y))) (ZMULT (SECOND x) (SECOND y))
QMULT := \xy.PAIR (ZMULT (FIRST x) (FIRST y)) (ZMULT (SECOND x) (SECOND y))
QDIV := \xy.PAIR (ZMULT (FIRST x) (SECOND y)) (ZMULT (SECOND x) (FIRST y))

// lists
NIL := PAIR TRUE TRUE
ISNIL := FIRST
CONS := \ht.PAIR FALSE (PAIR h t)
HEAD := \l.FIRST (SECOND l)
TAIL := \l.SECOND (SECOND l)
REDUCE := Y (\rlci.ISNIL l i (c (HEAD l) (r (TAIL l))))
LEN := \l.REDUCE l (\ht.SUCC t) 0
GET := Y (\rli.ISNIL l ??? (ISZERO i (HEAD l) (r (TAIL l) (PRED i))))
MAP := Y (\rlf.ISNIL l NIL (CONS (f (HEAD l)) (r (TAIL l) f)))
RANGE := \n.Y (\ri.EQ i n NIL (CONS i (r (SUCC i)))) 0
BYELEM := \nf.MAP (RANGE n) f
PUSH := \le.REDUCE l CONS (CONS e NIL)
POP := \l.ISNIL l ??? ((\t.(ISNIL t (HEAD l) (r t))) (TAIL l))

// matrices
NTOM := \n.CONS (CONS n NIL) NIL
MFMTCHK := \a.REDUCE a (\ht.AND (EQ (LEN a) (LEN h)) t) T
MHEAD := \a.HEAD (HEAD a)
MTAIL := \a.MAP (TAIL a) (\r.TAIL r)
MDIAGREDUCE := Y (\rlci.ISNIL l i (c (MHEAD l) (r (MTAIL l))))
MDIAGMAP := Y (\rlf.ISNIL l NIL (CONS (f (MHEAD l)) (r (MTAIL l) f)))
ROWS := \a.LEN a
COLS := \a.ISNIL a 0 (LEN (HEAD a))
ISDIMEQ := \ab.AND (EQ (ROWS a) (ROWS b)) (EQ (COLS a) (COLS b))
ISSQUARE := \a.EQ (ROWS a) (COLS a)
TRACE := \a.MDIAGREDUCE a ADD 0
ZTRACE := \a.MDIAGREDUCE a ZADD 0Z
QTRACE := \a.MDIAGREDUCE a QADD 0Q
MGET := \arc.GET (GET a r) c
MBYELEM := \rcf.BYELEM r (\i.BYELEM c (\j.f i j))
M0 := \rc.MBYELEM r c (\ij.0)
M0Z := \rc.MBYELEM r c (\ij.0Z)
M0Q := \rc.MBYELEM r c (\ij.0Q)
MI := \rc.MBYELEM r c (\ij.EQ i j 1 0)
MZI := \rc.MBYELEM r c (\ij.ZEQ i j 1Z 0Z)
MQI := \rc.MBYELEM r c (\ij.QEQ i j 1Q 0Q)
MADD := \ab.MBYELEM r c (\ij.ADD (MGET a i j) (MGET b i j))
MZADD := \ab.MBYELEM r c (\ij.ZADD (MGET a i j) (MGET b i j))
MQADD := \ab.MBYELEM r c (\ij.QADD (MGET a i j) (MGET b i j))

TRACE (CONS (CONS 1 (CONS 2 NIL)) (CONS (CONS 3 (CONS 4 NIL)) NIL)) =? 5
ZTRACE (CONS (CONS 1Z (CONS -2Z NIL)) (CONS (CONS 3Z (CONS -4Z NIL)) NIL)) =? -3Z
MADD (M0 2 2) (MI 2 2) =? (CONS (CONS 1 (CONS 0 NIL)) (CONS (CONS 0 (CONS 1 NIL)) NIL))